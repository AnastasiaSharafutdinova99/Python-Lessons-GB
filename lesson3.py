# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
#    Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.

def divide_the_numbers(numerator, denominator):
    '''
    Функиця выполняет деление чисел
    :param numerator: Числитель
    :param denominator: Знаменатель
    :return: Функция возвращает результат деления
    '''
    try:
        result = numerator / denominator
        print('Результат деления = ', result)
        return result
    except ZeroDivisionError:
        print('Знаменатель не может быть равен 0')
divide_the_numbers(float(input('Числитель = ')), float(input('Знаменатель = ')))


# 2. Выполнить функцию, которая принимает несколько параметров, описывающих данные пользователя:
#    имя, фамилия, год рождения, город проживания, email, телефон.
#    Функция должна принимать параметры как именованные аргументы.
#    Осуществить вывод данных о пользователе одной строкой.

def user_data(name, surname, year_of_birth, city, email, phone_number):
    '''
    Функция принимает данные о пользователе и записывает их в соответствующие переменные
    :param name: Имя пользователя
    :param surname: Фамилия пользователя
    :param year_of_birth: Год рождения пользователя
    :param city: Город проживания пользователя
    :param email: email пользователя
    :param phone_number: Номер телефона пользователя
    :return: Функция возвращает данные о пользователе
    '''
    print(f'Имя: {name}, фамилия: {surname}, год рождения: {year_of_birth}, город проживания: {city}, email: {email}, телефон: {phone_number}')
    return
data = input('Введите данные пользователя (имя, фамилия, год рождения, город проживания, email, телефон): ').split()
user_data(name = data[0], surname = data[1], year_of_birth = int(data[2]), city = data[3], email = data[4], phone_number = data[5])


# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента
#    и возвращает сумму наибольших двух аргументов.

def my_func(arg1, arg2, arg3):
    '''
    Функция вычисляет сумму наибольших двух аргументов из трех принятых
    :param arg1: Первый позиционный аргумент
    :param arg2: Второй позиционный аргумент
    :param arg3: Третий позиционный аргумент
    :return: Функция возвращает сумму наибольших двух аргументов
    '''
    first_max_arg = arg1
    if arg2 > arg1:
        first_max_arg = arg2
        if arg3 > arg1:
            second_max_arg = arg3
        else:
            second_max_arg = arg1
    elif arg3 > arg1:
        second_max_arg = arg3
    elif arg2 == arg1 & arg3 == arg1:
        second_max_arg = arg2
    result = first_max_arg + second_max_arg
    print(f'Сумма наибольших двух аргументов равна {result}')
    return result
my_func(int(input('Аргумер 1 = ')), int(input('Аргумер 2 = ')), int(input('Аргумер 3 = ')))


# 4. Программа принимает действительное положительное число x и целое отрицательное число y.
#    Выполните возведение числа x в степень y. Задание реализуйте в виде функции my_func(x, y).
#    При решении задания нужно обойтись без встроенной функции возведения числа в степень.
#    Подсказка: попробуйте решить задачу двумя способами.
#    Первый — возведение в степень с помощью оператора **.
#    Второй — более сложная реализация без оператора **, предусматривающая использование цикла.

def my_func(x, y):
    '''
    Первый способ решения задачи.
    Функция производит вовзведение в степень с помощью оператора **
    :param x: Дейтвительное положительное число, которое будет возводиться в степень
    :param y: Целове отрицательное число, которое будет степенью
    :return: Функция возвращает результат возвдения числа x в степень y
    '''
    if x < 0:
        print('Введите действительное положительное число')
        return
    if y > 0:
        print('Введите целое отрицательное число')
        return
    result = x ** y
    print(f'Число {x} в степени {y} равно {result}')
    return result
my_func(float(input('Введите число: ')), int(input('Введите отрицательную степень, в которую необходимо возвести число: ')))

def my_func(x, y):
    '''
    Второй способ решения задачи.
    Функция производит вовзведение в степень без оператора **, с использованием цикла.
    :param x: Дейтвительное положительное число, которое будет возводиться в степень
    :param y: Целове отрицательное число, которое будет степенью
    :return: Функция возвращает результат возвдения числа x в степень y
    '''
    if x < 0:
        print('Введите действительное положительное число')
        return
    if y > 0:
        print('Введите целое отрицательное число')
        return
    a = 1
    i = 0
    while i > y:
        a = a * x
        i = i - 1
    result = 1 / a
    print(f'Число {x} в степени {y} равно {result}')
    return result
my_func(float(input('Введите число: ')), int(input('Введите отрицательную степень, в которую необходимо возвести число: ')))


# 5. Программа запрашивает у пользователя строку чисел, разделённых пробелом.
#    При нажатии Enter должна выводиться сумма чисел.
#    Пользователь может продолжить ввод чисел, разделённых пробелом и снова нажать Enter.
#    Сумма вновь введённых чисел будет добавляться к уже подсчитанной сумме.
#    Но если вместо числа вводится специальный символ, выполнение программы завершается.
#    Если специальный символ введён после нескольких чисел,
#    то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.

def user_summ():
    '''
    Функция считает сумму введенных пользователем цифр до момента встречи специального символа (слово 'stop')
    :return: Функция возвращает сумму
    '''
    result = 0
    while True:
        num_line = input('Введите строку чисел: ').split()
        for el in num_line:
            if el == 'stop':
                print(f'Сумма чисел равна {result}')
                return
            else:
                result = result + int(el)
        print(f'Сумма чисел равна {result}')
    return result
user_summ()


# 6. Реализовать функцию int_func(), принимающую слова из маленьких латинских букв и возвращающую их же,
#    но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.

def int_func():
    '''
    Функция принимает на вход слова, написанные маленьки буквами
    и выводит каждое из них с заглавной
    :return: Функция возвращает слова, написанные с заглавной буквы
    '''
    for i in range(len(words)):
        for j in range(len(words[i])):
            if ord(words[i][j]) < 96 or ord(words[i][j]) > 123:
                print('Введите слова маленькими буквами')
                return False
    return words
words = input('Введите слова: ').split()
for i in range(len(words)):
    func_words = int_func()
    if func_words:
        print(func_words[i].title())
    else:
        break


# 7. Продолжить работу над заданием. В программу должна попадать строка из слов, разделённых пробелом.
#    Каждое слово состоит из латинских букв в нижнем регистре.
#    Нужно сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы.
#    Используйте написанную ранее функцию int_func().

def words_string():
    '''
    Функция принимает строку из слов, написанных с маленькой буквы
    и выводит строку, в которой каждое слово написано с заглавной буквы
    :return: Функция возвращает строку из слов, написанных с заглавной буквы
    '''
    user_words = input('Введите слова: ').split()
    func_words = int_func()
    if func_words:
        words = tuple(map(lambda w: w.title(), func_words))
        for l in range(len(words)):
            print(words[l], end=' ')
    return user_words
words_string()

