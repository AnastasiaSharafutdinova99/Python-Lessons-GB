from sys import argv
from functools import reduce
from itertools import count, cycle
from math import factorial

# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
#    Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
#    Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

def salary():
    '''
    Функция расчёта заработной платы сотрудника
    :param worked_hours: Выработка в часах
    :param payment_per_hour: Ставка в час
    :param premium: Премия
    :return: Функция возвращает рассчитанную заработную плату
    '''
    employee_salary = (worked_hours * payment_per_hour) + premium
    return employee_salary

worked_hours, payment_per_hour, premium = map(int, argv[1:])
print(salary())


# 2. Представлен список чисел.
#    Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
#    Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
#    Для его формирования используйте генератор.
#    Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
#    Результат: [12, 44, 4, 10, 78, 123].

initial_list = [472, 372, 254, 957, 515, 426, 856, 354, 938, 153]
new_list = [initial_list[i] for i in range(1, len(initial_list)) if initial_list[i] > initial_list[i - 1]]
print(new_list)


# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
#    Решите задание в одну строку.
#    Подсказка: используйте функцию range() и генератор.

numbers_set = {el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0}
print(numbers_set)


# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений.
#    Сформируйте итоговый массив чисел, соответствующих требованию.
#    Элементы выведите в порядке их следования в исходном списке.
#    Для выполнения задания обязательно используйте генератор.
#    Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
#    Результат: [23, 1, 3, 10, 4, 11]

numbers_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_num_list = [el for el in numbers_list if numbers_list.count(el) == 1]
print(new_num_list)


# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
#    В список должны войти чётные числа от 100 до 1000 (включая границы).
#    Нужно получить результат вычисления произведения всех элементов списка.
#    Подсказка: использовать функцию reduce().

even_num_list = [el for el in range(100, 1001) if el % 2 == 0]
def num_multiplication(prev_el, el):
    '''
    Функция вычисляет произведение элементов (предыдущего и текущего)
    :param prev_el: Предыдущий элемент
    :param el: Текущий элемент
    :return: Функция возвращает произведение предыдущего и текущего элементов
    '''
    return prev_el * el

print(functools.reduce(num_multiplication, even_num_list))


# 6. Реализовать два небольших скрипта:
#    итератор, генерирующий целые числа, начиная с указанного;
#    итератор, повторяющий элементы некоторого списка, определённого заранее.
#    Подсказка: используйте функцию count() и cycle() модуля itertools.
#    Обратите внимание, что создаваемый цикл не должен быть бесконечным.
#    Предусмотрите условие его завершения.
#    #### Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл.
#    Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.

print('First script')
for first_el in count(5):
    if first_el > 15:
        break
    else:
        print(first_el)

print('\nSecond script')
count = 0
for second_el in cycle('python'):
    if count > 15:
        break
    else:
        print(second_el)
        count += 1


# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
#    При вызове функции должен создаваться объект-генератор.
#    Функция вызывается следующим образом: for el in fact(n). Она отвечает за получение факториала числа.
#    В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
#    Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fact(n):
    '''
    Функция вычисляет факториал введенного пользователем числа
    :param n: Число, факториал которого требуется вычислить
    :return: Функция возвращает факториалы всех чисел от 1! до n!
    '''
    a = 1
    for el in range(1, n + 1):
        a = a * el
        yield a

num = 1
for el in fact(int(input('n = '))):
    print(f'{num}! = {el}')
    num += 1
